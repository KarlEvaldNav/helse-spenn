//ktor {
//  deployment {
//    port = 8080
//    port = ${?PORT}
//  }
//  application {
//    modules = [ no.nav.helse.spenn.rest.SpennApiKt.module ]
//  }
//}

sts {
  soap {
    username = ${STS_SOAP_USERNAME}
    password = ${STS_SOAP_USERNAME}
    url = ${SECURITYTOKENSERVICE_URL}
  }
  rest {
    url = "http://localhost:8080"
    url = ${?SECURITY_TOKEN_SERVICE_REST_URL}
    username = "foo"
    username = ${?STS_REST_USERNAME}
    password = "bar"
    password = ${?STS_REST_PASSWORD}
  }
}

aktorregisteret {
  base-url = "http://localhost/aktor"
  base-url = ${?AKTORREGISTERET_BASE_URL}
}

simulering {
  service {
    url = ${SIMULERING_SERVICE_URL}
  }
}

jms.mq {
  enabled = true
  enabled = ${?JMS_MQ_ENABLED}
}

ibm {
  mq {
    queue-manager = QM1
    queue-manager = ${?MQ_QUEUE_MANAGER}
    channel = DEV.ADMIN.SVRCONN
    channel = ${?MQ_CHANNEL}
    hostname = localhost
    hostname = ${?MQ_HOSTNAME}
    port = 1414
    port = ${?MQ_PORT}
    user = admin
    user = ${?MQ_USERNAME}
    password = passw0rd
    password = ${?MQ_PASSWORD}
  }
}

oppdrag {
  queue {
    mottak = ${OPPDRAG_QUEUE_MOTTAK}
    send = ${OPPDRAG_QUEUE_SEND}
  }
}

avstemming {
  queue.send = ${AVSTEMMING_QUEUE_SEND}
}

scheduler {
  enabled = true
  enabled = ${?SCHEDULER_ENABLED}
  tasks {
    simulering = true
    simulering = ${?SCHEDULER_TASKS_SIMULERING}
    oppdrag = false
    oppdrag = ${?SCHEDULER_TASKS_OPPDRAG}
    avstemming = false
    avstemming = ${?SCHEDULER_TASKS_AVSTEMMING}
  }
}

kafka {
  bootstrapservers = ${?KAFKA_BOOTSTRAP_SERVERS}
  appid = spenn-1
  appid = ${?KAFKA_APP_ID}
  username = ${KAFKA_USERNAME}
  password = ${KAFKA_PASSWORD}
  truststorepath = ${?NAV_TRUSTSTORE_PATH}
  truststorepassword = ${?NAV_TRUSTSTORE_PASSWORD}
  plaintext = ${?PLAIN_TEXT_KAFKA}
  offsetreset {
    enabled = false
    timestamp-millis = 1559340000000
  }
  streamvedtakenabled = true
}

datasource {
  url = "jdbc:h2:mem:testdb;MODE=PostgreSQL;DATABASE_TO_LOWER=TRUE"
  url = ${?SPRING_DATASOURCE_URL}
  url = ${?DATASOURCE_URL}
  hikari {
    maximum-pool-size = 5
    minimum-idle = 1
  }
  vault {
    enabled = true
    enabled = ${?SPRING_CLOUD_VAULT_ENABLED}
    enabled = ${?DATASOURCE_VAULT_ENABLED}
    mountpath = "postgresql/preprod-fss"
    mountpath = ${?SPRING_CLOUD_VAULT_GENERIC_BACKEND}
    mountpath = ${?DATASOURCE_VAULT_MOUNTPATH}
  }
}

spenn-api {
  auth {
    oidc {
      accepted-audience = ${NO_NAV_SECURITY_OIDC_ISSUER_OURISSUER_ACCEPTED_AUDIENCE}
      discovery-url = ${NO_NAV_SECURITY_OIDC_ISSUER_OURISSUER_DISCOVERYURL}
    }
    required-group = "group1"
    required-group = ${?API_ACCESS_REQUIREDGROUP}
  }
}







