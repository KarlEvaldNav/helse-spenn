/*
 * This file is generated by jOOQ.
 */
package no.nav.helse.spenn.jooq.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import no.nav.helse.spenn.jooq.Indexes;
import no.nav.helse.spenn.jooq.Keys;
import no.nav.helse.spenn.jooq.Public;
import no.nav.helse.spenn.jooq.tables.records.TransaksjonRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transaksjon extends TableImpl<TransaksjonRecord> {

    private static final long serialVersionUID = 1676341729;

    /**
     * The reference instance of <code>public.transaksjon</code>
     */
    public static final Transaksjon TRANSAKSJON = new Transaksjon();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransaksjonRecord> getRecordType() {
        return TransaksjonRecord.class;
    }

    /**
     * The column <code>public.transaksjon.id</code>.
     */
    public final TableField<TransaksjonRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('transaksjon_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.transaksjon.oppdrag_id</code>.
     */
    public final TableField<TransaksjonRecord, Long> OPPDRAG_ID = createField(DSL.name("oppdrag_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.transaksjon.nokkel</code>.
     */
    public final TableField<TransaksjonRecord, Timestamp> NOKKEL = createField(DSL.name("nokkel"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.transaksjon.avstemt</code>.
     */
    public final TableField<TransaksjonRecord, Boolean> AVSTEMT = createField(DSL.name("avstemt"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.transaksjon.status</code>.
     */
    public final TableField<TransaksjonRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>public.transaksjon.utbetalingsoppdrag</code>.
     */
    public final TableField<TransaksjonRecord, String> UTBETALINGSOPPDRAG = createField(DSL.name("utbetalingsoppdrag"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.transaksjon.oppdragresponse</code>.
     */
    public final TableField<TransaksjonRecord, String> OPPDRAGRESPONSE = createField(DSL.name("oppdragresponse"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.transaksjon.simuleringresult</code>.
     */
    public final TableField<TransaksjonRecord, String> SIMULERINGRESULT = createField(DSL.name("simuleringresult"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.transaksjon</code> table reference
     */
    public Transaksjon() {
        this(DSL.name("transaksjon"), null);
    }

    /**
     * Create an aliased <code>public.transaksjon</code> table reference
     */
    public Transaksjon(String alias) {
        this(DSL.name(alias), TRANSAKSJON);
    }

    /**
     * Create an aliased <code>public.transaksjon</code> table reference
     */
    public Transaksjon(Name alias) {
        this(alias, TRANSAKSJON);
    }

    private Transaksjon(Name alias, Table<TransaksjonRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transaksjon(Name alias, Table<TransaksjonRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Transaksjon(Table<O> child, ForeignKey<O, TransaksjonRecord> key) {
        super(child, key, TRANSAKSJON);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRANSAKSJON_PKEY, Indexes.TRANSAKSJON_STATUS_IDX, Indexes.UQ_TRANSAKSJON_NOKKEL, Indexes.UQ_TRANSAKSJON_OPPDRAG_ID);
    }

    @Override
    public Identity<TransaksjonRecord, Long> getIdentity() {
        return Keys.IDENTITY_TRANSAKSJON;
    }

    @Override
    public UniqueKey<TransaksjonRecord> getPrimaryKey() {
        return Keys.TRANSAKSJON_PKEY;
    }

    @Override
    public List<UniqueKey<TransaksjonRecord>> getKeys() {
        return Arrays.<UniqueKey<TransaksjonRecord>>asList(Keys.TRANSAKSJON_PKEY, Keys.UQ_TRANSAKSJON_OPPDRAG_ID, Keys.UQ_TRANSAKSJON_NOKKEL);
    }

    @Override
    public List<ForeignKey<TransaksjonRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TransaksjonRecord, ?>>asList(Keys.TRANSAKSJON__TRANSAKSJON_OPPDRAG_ID_FKEY);
    }

    public Oppdrag oppdrag() {
        return new Oppdrag(this, Keys.TRANSAKSJON__TRANSAKSJON_OPPDRAG_ID_FKEY);
    }

    @Override
    public Transaksjon as(String alias) {
        return new Transaksjon(DSL.name(alias), this);
    }

    @Override
    public Transaksjon as(Name alias) {
        return new Transaksjon(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transaksjon rename(String name) {
        return new Transaksjon(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transaksjon rename(Name name) {
        return new Transaksjon(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, Timestamp, Boolean, String, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
