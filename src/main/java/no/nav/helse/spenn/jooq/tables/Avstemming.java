/*
 * This file is generated by jOOQ.
 */
package no.nav.helse.spenn.jooq.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import no.nav.helse.spenn.jooq.Indexes;
import no.nav.helse.spenn.jooq.Keys;
import no.nav.helse.spenn.jooq.Public;
import no.nav.helse.spenn.jooq.tables.records.AvstemmingRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Avstemming extends TableImpl<AvstemmingRecord> {

    private static final long serialVersionUID = 1219779170;

    /**
     * The reference instance of <code>public.avstemming</code>
     */
    public static final Avstemming AVSTEMMING = new Avstemming();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AvstemmingRecord> getRecordType() {
        return AvstemmingRecord.class;
    }

    /**
     * The column <code>public.avstemming.id</code>.
     */
    public final TableField<AvstemmingRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('avstemming_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.avstemming.oppdragstate_id</code>.
     */
    public final TableField<AvstemmingRecord, Long> OPPDRAGSTATE_ID = createField("oppdragstate_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.avstemming.nokkel</code>.
     */
    public final TableField<AvstemmingRecord, Timestamp> NOKKEL = createField("nokkel", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.avstemming.avstemt</code>.
     */
    public final TableField<AvstemmingRecord, Boolean> AVSTEMT = createField("avstemt", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * Create a <code>public.avstemming</code> table reference
     */
    public Avstemming() {
        this(DSL.name("avstemming"), null);
    }

    /**
     * Create an aliased <code>public.avstemming</code> table reference
     */
    public Avstemming(String alias) {
        this(DSL.name(alias), AVSTEMMING);
    }

    /**
     * Create an aliased <code>public.avstemming</code> table reference
     */
    public Avstemming(Name alias) {
        this(alias, AVSTEMMING);
    }

    private Avstemming(Name alias, Table<AvstemmingRecord> aliased) {
        this(alias, aliased, null);
    }

    private Avstemming(Name alias, Table<AvstemmingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Avstemming(Table<O> child, ForeignKey<O, AvstemmingRecord> key) {
        super(child, key, AVSTEMMING);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.AVSTEMMING_PKEY, Indexes.UQ_AVSTEMMING_NOKKEL, Indexes.UQ_AVSTEMMING_OPPDRAGSTATE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AvstemmingRecord, Long> getIdentity() {
        return Keys.IDENTITY_AVSTEMMING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AvstemmingRecord> getPrimaryKey() {
        return Keys.AVSTEMMING_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AvstemmingRecord>> getKeys() {
        return Arrays.<UniqueKey<AvstemmingRecord>>asList(Keys.AVSTEMMING_PKEY, Keys.UQ_AVSTEMMING_OPPDRAGSTATE, Keys.UQ_AVSTEMMING_NOKKEL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AvstemmingRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AvstemmingRecord, ?>>asList(Keys.AVSTEMMING__AVSTEMMING_OPPDRAGSTATE_ID_FKEY);
    }

    public Oppdragstate oppdragstate() {
        return new Oppdragstate(this, Keys.AVSTEMMING__AVSTEMMING_OPPDRAGSTATE_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Avstemming as(String alias) {
        return new Avstemming(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Avstemming as(Name alias) {
        return new Avstemming(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Avstemming rename(String name) {
        return new Avstemming(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Avstemming rename(Name name) {
        return new Avstemming(name, null);
    }
}
