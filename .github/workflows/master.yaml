name: Bygg og deploy master

on:
  push:
    branches:
      - master
env:
  TEAM: tbd
  IMAGE: docker.pkg.github.com/${{ github.repository }}/spenn

jobs:
  set_version:
    runs-on: ubuntu-latest
    steps:
      - name: create docker tag
        run: echo ::set-env name=TAG::$(echo ${{ github.sha }} | cut -c1-7)
    outputs:
      tag: ${{ env.TAG }}

  build:
    runs-on: ubuntu-latest
    needs: set_version
    steps:
      - uses: actions/checkout@v1
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: |
              ${{ runner.os }}-gradle-
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - name: unit test and build
        run: ./gradlew test build
        env:
          ORG_GRADLE_PROJECT_githubUser: x-access-token
          ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.GITHUB_TOKEN }}
      - name: build docker image
        run: docker build . --pull -t ${{ env.IMAGE }}:${{ needs.set_version.outputs.tag }}
      - name: push docker image
        run: |
          echo "$GITHUB_TOKEN" | docker login --username "$GITHUB_REPOSITORY" --password-stdin https://docker.pkg.github.com
          docker push ${{ env.IMAGE }}:${{ needs.set_version.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  snyk:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Gradle vulnerability check
        uses: snyk/actions/gradle-jdk12@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          ORG_GRADLE_PROJECT_githubUser: x-access-token
          ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: --org=tbd-ty7 --fail-on=all --project-name=spenn
          command: monitor

  deploy_dev:
    runs-on: ubuntu-latest
    needs: [set_version, snyk, build]
    steps:
      - uses: actions/checkout@v1
      - name: deploy to dev
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-fss
          ENVIRONMENT: dev-fss
          RESOURCE: deploy/dev.yml,deploy/dev-job.yml
          WAIT: false
          PRINT_PAYLOAD: true
          VAR: "image=${{env.IMAGE}},tag=${{ needs.set_version.outputs.tag }},team=${{env.TEAM}}"

  deploy_prod:
    runs-on: ubuntu-latest
    needs: [set_version, deploy_dev]
    steps:
      - uses: actions/checkout@v1
      - name: deploy to prod
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: prod-fss
          ENVIRONMENT: prod-fss
          RESOURCE: deploy/prod.yml,deploy/prod-job.yml
          WAIT: false
          PRINT_PAYLOAD: true
          VAR: "image=${{env.IMAGE}},tag=${{ needs.set_version.outputs.tag }},team=${{env.TEAM}}"

